// bktec fetches and runs test plans generated by Buildkite
// Test Engine.
package main

import (
	"context"
	"errors"
	"fmt"
	"os"
	"os/exec"

	"github.com/buildkite/test-engine-client/internal/command"
	"github.com/buildkite/test-engine-client/internal/version"
	"github.com/urfave/cli/v3"
)

func main() {
	cmd := &cli.Command{
		Name:   "bktec",
		Usage:  "Buildkite Test Engine Client",
		Action: command.Run,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "files",
				Value: "",
				Usage: "override the default test file discovery by providing a path to a file containing a list of test files (one per line)",
			},
			&cli.BoolFlag{
				Name:   "version",
				Value:  false,
				Usage:  "print version information and exit",
				Action: printVersion,
			},
		},
		Commands: []*cli.Command{
			{
				Name:   "run",
				Usage:  "Run tests (default)",
				Action: command.Run,
			},
			{
				Name:   "plan",
				Usage:  "Generate test plan without running tests",
				Action: command.Plan,
			},
		},
	}

	if err := cmd.Run(context.Background(), os.Args); err != nil {
		logErrorAndExit(err)
	}
}

func printVersion(ctx context.Context, cmd *cli.Command, versionFlag bool) error {
	// Flag will be true if called with `bktec [...] --version`
	if !versionFlag {
		return nil
	}
	fmt.Printf("bktec %s\n", version.Version)
	os.Exit(0)
	return nil
}

func logErrorAndExit(err error) {
	exitError := new(exec.ExitError)

	if errors.As(err, &exitError) {
		// If error wraps an exitError exit with the specified code ...
		os.Exit(exitError.ExitCode())
	} else {
		// otherwise exit code 16
		os.Exit(16)
	}
}
