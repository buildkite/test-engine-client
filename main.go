// bktec fetches and runs test plans generated by Buildkite
// Test Engine.
package main

import (
	"context"
	"errors"
	"fmt"
	"os"
	"os/exec"

	"github.com/buildkite/test-engine-client/internal/command"
	"github.com/buildkite/test-engine-client/internal/config"
	"github.com/buildkite/test-engine-client/internal/debug"
	"github.com/buildkite/test-engine-client/internal/version"
	"github.com/urfave/cli/v3"
)

var cfg = config.New()

var cliCommand = &cli.Command{
	Name:  "bktec",
	Usage: "Buildkite Test Engine Client",
	Action: func(ctx context.Context, cmd *cli.Command) error {
		// This action is called when no command is given, and calls run().
		// So running `bktec` is the same as running `bktec run`.
		//
		// Because this action is also called when no matching command is found
		// a typo like `bktec plaan` will call run() with "plaan" in cmd.Args().
		// We error here if any arguments are present and assume the first is a
		// mis-spelled command name.
		if cmd.Args().Len() > 0 {
			fmt.Fprintf(os.Stderr, "invalid command %q\n", cmd.Args().Get(0))
			cli.ShowRootCommandHelpAndExit(cmd, 1)
		}
		return run(ctx, cmd)
	},
	Flags: []cli.Flag{
		&cli.StringFlag{
			Name:     "files",
			Category: "TEST RUNNER",
			Value:    "",
			Usage:    "Override the default test file discovery by providing a path to a file containing a list of test files (one per line)",
		},
		&cli.BoolFlag{
			Name:   "version",
			Usage:  "print version information and exit",
			Action: printVersion,
		},
		&cli.BoolFlag{
			Name:        "debug",
			Usage:       "Enable debug output",
			Sources:     cli.EnvVars("BUILDKITE_TEST_ENGINE_DEBUG_ENABLED"),
			Destination: &cfg.DebugEnabled,
		},

		// Values from the Buildkite build env
		&cli.StringFlag{
			Name:        "organization-slug",
			Category:    "BUILD ENVIRONMENT",
			Usage:       "Buildkite organization slug",
			Sources:     cli.EnvVars("BUILDKITE_ORGANIZATION_SLUG"),
			Destination: &cfg.OrganizationSlug,
			Hidden:      true,
		},
		&cli.StringFlag{
			Name:        "build-id",
			Category:    "BUILD ENVIRONMENT",
			Usage:       "Buildkite build id",
			Sources:     cli.EnvVars("BUILDKITE_BUILD_ID"),
			Destination: &cfg.BuildId,
			Hidden:      true,
		},
		&cli.StringFlag{
			Name:        "job-id",
			Category:    "BUILD ENVIRONMENT",
			Usage:       "Buildkite job id",
			Sources:     cli.EnvVars("BUILDKITE_JOB_ID"),
			Destination: &cfg.JobId,
			Hidden:      true,
		},
		&cli.StringFlag{
			Name:        "step-id",
			Category:    "BUILD ENVIRONMENT",
			Usage:       "Buildkite step id",
			Sources:     cli.EnvVars("BUILDKITE_STEP_ID"),
			Destination: &cfg.StepId,
			Hidden:      true,
		},
		&cli.StringFlag{
			Name:        "branch",
			Category:    "BUILD ENVIRONMENT",
			Usage:       "Branch",
			Sources:     cli.EnvVars("BUILDKITE_BRANCH"),
			Destination: &cfg.Branch,
			Hidden:      true,
		},
		&cli.IntFlag{
			Name:        "retry-count",
			Category:    "BUILD ENVIRONMENT",
			Usage:       "Retry count",
			Sources:     cli.EnvVars("BUILDKITE_RETRY_COUNT"),
			Destination: &cfg.JobRetryCount,
			Hidden:      true,
		},
		&cli.IntFlag{
			Name:        "parallel-job",
			Category:    "BUILD ENVIRONMENT",
			Usage:       "Parallel job",
			Sources:     cli.EnvVars("BUILDKITE_PARALLEL_JOB"),
			Destination: &cfg.NodeIndex,
			Hidden:      true,
		},
		&cli.IntFlag{
			Name:        "parallelism",
			Category:    "BUILD ENVIRONMENT",
			Usage:       "Run the specified number of bktec processes in parallel",
			Sources:     cli.EnvVars("BUILDKITE_PARALLEL_JOB_COUNT"),
			Destination: &cfg.Parallelism,
		},

		// Test Engine
		&cli.StringFlag{
			Name:        "access-token",
			Category:    "TEST ENGINE",
			Usage:       "Buildkite API access token",
			Sources:     cli.EnvVars("BUILDKITE_TEST_ENGINE_API_ACCESS_TOKEN"),
			Destination: &cfg.AccessToken,
		},
		&cli.StringFlag{
			Name:        "suite-slug",
			Category:    "TEST ENGINE",
			Usage:       "Buildkite suite slug",
			Sources:     cli.EnvVars("BUILDKITE_TEST_ENGINE_SUITE_SLUG"),
			Destination: &cfg.SuiteSlug,
		},
		&cli.StringFlag{
			Name:        "base-url",
			Category:    "TEST ENGINE",
			Usage:       "Buildkite API base URL",
			Sources:     cli.EnvVars("BUILDKITE_TEST_ENGINE_BASE_URL"),
			Value:       "https://api.buildkite.com",
			Destination: &cfg.ServerBaseUrl,
			Hidden:      true,
		},

		// Test Runner
		&cli.StringFlag{
			Name:        "test-command",
			Category:    "TEST RUNNER",
			Usage:       "Test command",
			Sources:     cli.EnvVars("BUILDKITE_TEST_ENGINE_TEST_CMD"),
			Destination: &cfg.TestCommand,
		},
		&cli.StringFlag{
			Name:        "test-file-pattern",
			Category:    "TEST RUNNER",
			Usage:       "Test file pattern",
			Sources:     cli.EnvVars("BUILDKITE_TEST_ENGINE_TEST_FILE_PATTERN"),
			Destination: &cfg.TestFilePattern,
		},
		&cli.StringFlag{
			Name:        "test-file-exclude-pattern",
			Category:    "TEST RUNNER",
			Usage:       "Test file exclude pattern",
			Sources:     cli.EnvVars("BUILDKITE_TEST_ENGINE_TEST_FILE_EXCLUDE_PATTERN"),
			Destination: &cfg.TestFileExcludePattern,
		},
		&cli.StringFlag{
			Name:        "test-runner",
			Category:    "TEST RUNNER",
			Usage:       "Test runner",
			Sources:     cli.EnvVars("BUILDKITE_TEST_ENGINE_TEST_RUNNER"),
			Destination: &cfg.TestRunner,
		},
		&cli.BoolFlag{
			Name:     "disable-retry-muted",
			Category: "TEST RUNNER",
			Usage:    "Disable retry for muted tests",
			Value:    false,
			Sources:  cli.EnvVars("BUILDKITE_TEST_ENGINE_DISABLE_RETRY_FOR_MUTED_TEST"),
			Action: func(ctx context.Context, cmd *cli.Command, v bool) error {
				// Note the config struct member is the logical opposite of the flag /
				// env var, so we need to invert the bool here.
				cfg.RetryForMutedTest = !v
				return nil
			},
		},
		&cli.StringFlag{
			Name:        "result-path",
			Category:    "TEST RUNNER",
			Usage:       "Path to the output file for the test runner",
			Sources:     cli.EnvVars("BUILDKITE_TEST_ENGINE_RESULT_PATH"),
			Destination: &cfg.ResultPath,
		},
		&cli.BoolFlag{
			Name:        "split-by-example",
			Category:    "TEST RUNNER",
			Usage:       "Enable split by example (not supported by all test runners)",
			Value:       false,
			Sources:     cli.EnvVars("BUILDKITE_TEST_ENGINE_SPLIT_BY_EXAMPLE"),
			Destination: &cfg.SplitByExample,
		},
		&cli.IntFlag{
			Name:        "test-engine-retry-count",
			Category:    "TEST RUNNER",
			Usage:       "Number of times to retry failing tests",
			Sources:     cli.EnvVars("BUILDKITE_TEST_ENGINE_RETRY_COUNT"),
			Destination: &cfg.MaxRetries,
		},
		&cli.StringFlag{
			Name:        "retry-command",
			Category:    "TEST RUNNER",
			Usage:       "Command to run when retrying failed tests.",
			Sources:     cli.EnvVars("BUILDKITE_TEST_ENGINE_RETRY_CMD"),
			Destination: &cfg.RetryCommand,
		},
	},
	Commands: []*cli.Command{
		{
			Name:   "run",
			Usage:  "Run tests (default)",
			Action: run,
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:        "plan-identifier",
					Value:       "",
					Usage:       "run the tests from a plan previously generated matching the provided plan-identifier",
					Destination: &cfg.Identifier,
				},
			},
		},
		{
			Name:   "plan",
			Usage:  "Generate test plan without running tests",
			Action: plan,
			Flags: []cli.Flag{
				&cli.IntFlag{
					Name:        "max-parallelism",
					Value:       0,
					Usage:       "instruct the test planner to calculate optimal parallelism for the build, not to exceed the provided value. When 0 this flag is ignored and the test plan parallelism will be derived from the BUILDKITE_PARALLEL_JOB_COUNT environment variable",
					Destination: &cfg.MaxParallelism,
					Action: func(ctx context.Context, cmd *cli.Command, v int) error {
						if v < 0 || v > 1000 {
							return fmt.Errorf("max-parallelism must be between 0 and 1000")
						}
						return nil
					},
				},
			},
		},
	},
}

func main() {
	if err := cliCommand.Run(context.Background(), os.Args); err != nil {
		logErrorAndExit(err)
	}
}

func run(ctx context.Context, cmd *cli.Command) error {
	debug.SetDebug(cmd.Bool("debug"))

	err := cfg.Validate()
	if err != nil {
		return fmt.Errorf("invalid configuration...\n%w", err)
	}

	return command.Run(ctx, cfg, cmd.String("files"))
}

func plan(ctx context.Context, cmd *cli.Command) error {
	debug.SetDebug(cmd.Bool("debug"))
	debug.SetOutput(os.Stderr)

	err := cfg.Validate()
	if err != nil {
		return fmt.Errorf("invalid configuration...\n%w", err)
	}

	return command.Plan(ctx, cfg, cmd.String("files"))
}

func printVersion(ctx context.Context, cmd *cli.Command, versionFlag bool) error {
	// Flag will be true if called with `bktec [...] --version`
	if !versionFlag {
		return nil
	}
	fmt.Printf("bktec %s\n", version.Version)
	os.Exit(0)
	return nil
}

func logErrorAndExit(err error) {
	fmt.Fprintln(os.Stderr, err)

	exitError := new(exec.ExitError)
	if errors.As(err, &exitError) {
		// If error wraps an exitError exit with the specified code ...
		os.Exit(exitError.ExitCode())
	} else {
		// otherwise exit code 16
		os.Exit(16)
	}
}
